# Config for phase 1 of 2 of e2e regression tests.
# See also ensure_consistent_config.sh
#
# Phase 1 runs all block-based analyzers; phase 2 runs all others. This is a slightly hacky
# but low-effort way to ensure that all non-block analyzers perform RPCs at a deterministic
# height and therefore always hit the RPC cache. (Most EVM-related analyzers make RPCs at the
# maximum height that's been reached by block analyzers by that point.)
analysis:
  source:
    cache: { cache_dir: tests/e2e_regression/damask/rpc-cache }
    chain_name: mainnet
    nodes:
      # Node will be accessed only when the filling up the cache.
      # In CI, the cache is expected to have all the node responses as the node is not reachable.
      damask: { default: { rpc: unix:/tmp/node.sock } }
    ipfs:
      gateway: https://ipfs.io
    fast_startup: true
  analyzers:
    consensus:
      from: 8_048_956  # Damask genesis
      to: 8_049_955    # 1000 blocks; compromise between fast and comprehensive
    # TODO: Re-enable Emerald once our internal Emerald node is fixed (likely via deploying https://github.com/oasisprotocol/oasis-core/pull/5540)
    # emerald:
    #   from: 1_003_298  # round at Damask genesis
    #   to: 1_004_297    # 1000 blocks; compromise between fast and comprehensive
    # sapphire: # Not tested. Does not use much code that is not covered by emerald.
    #   from: 0  # first round in Damask
  storage:
    backend: postgres
    endpoint: postgresql://rwuser:password@localhost:5432/indexer?sslmode=disable
    DANGER__WIPE_STORAGE_ON_STARTUP: true
    migrations: file://storage/migrations

server:
  chain_name: mainnet
  endpoint: localhost:8008
  storage:
    endpoint: postgresql://api:password@localhost:5432/indexer?sslmode=disable
    backend: postgres

log:
  level: debug
  format: json

metrics:
  pull_endpoint: localhost:8009

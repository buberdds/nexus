// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package types

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
	signature "github.com/oasisprotocol/oasis-core/go/common/crypto/signature"
	staking "github.com/oasisprotocol/oasis-core/go/staking/api"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns the indexer status.
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// Returns a list of consensus layer accounts.
	// (GET /consensus/accounts)
	GetConsensusAccounts(w http.ResponseWriter, r *http.Request, params GetConsensusAccountsParams)
	// Returns a consensus layer account.
	// (GET /consensus/accounts/{address})
	GetConsensusAccountsAddress(w http.ResponseWriter, r *http.Request, address staking.Address)
	// Returns an account's debonding delegations.
	// (GET /consensus/accounts/{address}/debonding_delegations)
	GetConsensusAccountsAddressDebondingDelegations(w http.ResponseWriter, r *http.Request, address staking.Address)
	// Returns an account's delegations.
	// (GET /consensus/accounts/{address}/delegations)
	GetConsensusAccountsAddressDelegations(w http.ResponseWriter, r *http.Request, address staking.Address)
	// Returns a list of consensus blocks, sorted from most to least recent.
	// (GET /consensus/blocks)
	GetConsensusBlocks(w http.ResponseWriter, r *http.Request, params GetConsensusBlocksParams)
	// Returns a consensus block.
	// (GET /consensus/blocks/{height})
	GetConsensusBlocksHeight(w http.ResponseWriter, r *http.Request, height int64)
	// Returns a list of entities registered at the consensus layer.
	// (GET /consensus/entities)
	GetConsensusEntities(w http.ResponseWriter, r *http.Request, params GetConsensusEntitiesParams)
	// Returns an entity registered at the consensus layer.
	// (GET /consensus/entities/{entity_id})
	GetConsensusEntitiesEntityId(w http.ResponseWriter, r *http.Request, entityId signature.PublicKey)
	// Returns a list of nodes registered at the consensus layer.
	// (GET /consensus/entities/{entity_id}/nodes)
	GetConsensusEntitiesEntityIdNodes(w http.ResponseWriter, r *http.Request, entityId signature.PublicKey, params GetConsensusEntitiesEntityIdNodesParams)
	// Returns a node registered at the consensus layer.
	// (GET /consensus/entities/{entity_id}/nodes/{node_id})
	GetConsensusEntitiesEntityIdNodesNodeId(w http.ResponseWriter, r *http.Request, entityId signature.PublicKey, nodeId signature.PublicKey)
	// Returns a list of consensus epochs.
	// (GET /consensus/epochs)
	GetConsensusEpochs(w http.ResponseWriter, r *http.Request, params GetConsensusEpochsParams)
	// Returns a consensus epoch.
	// (GET /consensus/epochs/{epoch})
	GetConsensusEpochsEpoch(w http.ResponseWriter, r *http.Request, epoch int64)
	// Returns a list of consensus events.
	// (GET /consensus/events)
	GetConsensusEvents(w http.ResponseWriter, r *http.Request, params GetConsensusEventsParams)
	// Returns a list of governance proposals.
	// (GET /consensus/proposals)
	GetConsensusProposals(w http.ResponseWriter, r *http.Request, params GetConsensusProposalsParams)
	// Returns a governance proposal.
	// (GET /consensus/proposals/{proposal_id})
	GetConsensusProposalsProposalId(w http.ResponseWriter, r *http.Request, proposalId int64)
	// Returns a list of votes for a governance proposal.
	// (GET /consensus/proposals/{proposal_id}/votes)
	GetConsensusProposalsProposalIdVotes(w http.ResponseWriter, r *http.Request, proposalId int64, params GetConsensusProposalsProposalIdVotesParams)
	// Returns the consensus layer transaction volume at daily granularity
	// (GET /consensus/stats/tx_volume)
	GetConsensusStatsTxVolume(w http.ResponseWriter, r *http.Request, params GetConsensusStatsTxVolumeParams)
	// Returns a list of consensus transactions.
	// (GET /consensus/transactions)
	GetConsensusTransactions(w http.ResponseWriter, r *http.Request, params GetConsensusTransactionsParams)
	// Returns a consensus transaction.
	// (GET /consensus/transactions/{tx_hash})
	GetConsensusTransactionsTxHash(w http.ResponseWriter, r *http.Request, txHash string)
	// Returns a list of validators registered at the consensus layer.
	// (GET /consensus/validators)
	GetConsensusValidators(w http.ResponseWriter, r *http.Request, params GetConsensusValidatorsParams)
	// Returns a validator registered at the consensus layer.
	// (GET /consensus/validators/{entity_id})
	GetConsensusValidatorsEntityId(w http.ResponseWriter, r *http.Request, entityId signature.PublicKey)
	// Returns a list of Emerald blocks.
	// (GET /emerald/blocks)
	GetEmeraldBlocks(w http.ResponseWriter, r *http.Request, params GetEmeraldBlocksParams)
	// Returns a list of ERC-20 tokens on Emerald.
	// (GET /emerald/tokens)
	GetEmeraldTokens(w http.ResponseWriter, r *http.Request, params GetEmeraldTokensParams)
	// Returns a list of Emerald transactions.
	// (GET /emerald/transactions)
	GetEmeraldTransactions(w http.ResponseWriter, r *http.Request, params GetEmeraldTransactionsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccounts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusAccountsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "minAvailable" -------------

	err = runtime.BindQueryParameter("form", true, false, "minAvailable", r.URL.Query(), &params.MinAvailable)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minAvailable", Err: err})
		return
	}

	// ------------- Optional query parameter "maxAvailable" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxAvailable", r.URL.Query(), &params.MaxAvailable)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxAvailable", Err: err})
		return
	}

	// ------------- Optional query parameter "minEscrow" -------------

	err = runtime.BindQueryParameter("form", true, false, "minEscrow", r.URL.Query(), &params.MinEscrow)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minEscrow", Err: err})
		return
	}

	// ------------- Optional query parameter "maxEscrow" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxEscrow", r.URL.Query(), &params.MaxEscrow)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxEscrow", Err: err})
		return
	}

	// ------------- Optional query parameter "minDebonding" -------------

	err = runtime.BindQueryParameter("form", true, false, "minDebonding", r.URL.Query(), &params.MinDebonding)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minDebonding", Err: err})
		return
	}

	// ------------- Optional query parameter "maxDebonding" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxDebonding", r.URL.Query(), &params.MaxDebonding)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxDebonding", Err: err})
		return
	}

	// ------------- Optional query parameter "minTotalBalance" -------------

	err = runtime.BindQueryParameter("form", true, false, "minTotalBalance", r.URL.Query(), &params.MinTotalBalance)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minTotalBalance", Err: err})
		return
	}

	// ------------- Optional query parameter "maxTotalBalance" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxTotalBalance", r.URL.Query(), &params.MaxTotalBalance)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxTotalBalance", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccounts(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccountsAddress operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccountsAddress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address staking.Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccountsAddress(w, r, address)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccountsAddressDebondingDelegations operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccountsAddressDebondingDelegations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address staking.Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccountsAddressDebondingDelegations(w, r, address)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusAccountsAddressDelegations operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusAccountsAddressDelegations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "address" -------------
	var address staking.Address

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, chi.URLParam(r, "address"), &address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusAccountsAddressDelegations(w, r, address)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusBlocks operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusBlocks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusBlocksParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusBlocks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusBlocksHeight operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusBlocksHeight(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "height" -------------
	var height int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "height", runtime.ParamLocationPath, chi.URLParam(r, "height"), &height)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "height", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusBlocksHeight(w, r, height)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEntities operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEntities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusEntitiesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEntities(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEntitiesEntityId operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEntitiesEntityId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "entity_id" -------------
	var entityId signature.PublicKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, chi.URLParam(r, "entity_id"), &entityId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEntitiesEntityId(w, r, entityId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEntitiesEntityIdNodes operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEntitiesEntityIdNodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "entity_id" -------------
	var entityId signature.PublicKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, chi.URLParam(r, "entity_id"), &entityId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusEntitiesEntityIdNodesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEntitiesEntityIdNodes(w, r, entityId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEntitiesEntityIdNodesNodeId operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEntitiesEntityIdNodesNodeId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "entity_id" -------------
	var entityId signature.PublicKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, chi.URLParam(r, "entity_id"), &entityId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity_id", Err: err})
		return
	}

	// ------------- Path parameter "node_id" -------------
	var nodeId signature.PublicKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "node_id", runtime.ParamLocationPath, chi.URLParam(r, "node_id"), &nodeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEntitiesEntityIdNodesNodeId(w, r, entityId, nodeId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEpochs operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEpochs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusEpochsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEpochs(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEpochsEpoch operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEpochsEpoch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "epoch" -------------
	var epoch int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "epoch", runtime.ParamLocationPath, chi.URLParam(r, "epoch"), &epoch)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "epoch", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEpochsEpoch(w, r, epoch)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusEvents operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusEventsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "block" -------------

	err = runtime.BindQueryParameter("form", true, false, "block", r.URL.Query(), &params.Block)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "block", Err: err})
		return
	}

	// ------------- Optional query parameter "tx_index" -------------

	err = runtime.BindQueryParameter("form", true, false, "tx_index", r.URL.Query(), &params.TxIndex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tx_index", Err: err})
		return
	}

	// ------------- Optional query parameter "tx_hash" -------------

	err = runtime.BindQueryParameter("form", true, false, "tx_hash", r.URL.Query(), &params.TxHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tx_hash", Err: err})
		return
	}

	// ------------- Optional query parameter "rel" -------------

	err = runtime.BindQueryParameter("form", true, false, "rel", r.URL.Query(), &params.Rel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rel", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusEvents(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusProposals operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusProposals(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusProposalsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "submitter" -------------

	err = runtime.BindQueryParameter("form", true, false, "submitter", r.URL.Query(), &params.Submitter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "submitter", Err: err})
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusProposals(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusProposalsProposalId operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusProposalsProposalId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "proposal_id", runtime.ParamLocationPath, chi.URLParam(r, "proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "proposal_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusProposalsProposalId(w, r, proposalId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusProposalsProposalIdVotes operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusProposalsProposalIdVotes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "proposal_id" -------------
	var proposalId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "proposal_id", runtime.ParamLocationPath, chi.URLParam(r, "proposal_id"), &proposalId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "proposal_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusProposalsProposalIdVotesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusProposalsProposalIdVotes(w, r, proposalId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusStatsTxVolume operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusStatsTxVolume(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusStatsTxVolumeParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "bucket_size_seconds" -------------

	err = runtime.BindQueryParameter("form", true, false, "bucket_size_seconds", r.URL.Query(), &params.BucketSizeSeconds)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bucket_size_seconds", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusStatsTxVolume(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusTransactions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusTransactionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "block" -------------

	err = runtime.BindQueryParameter("form", true, false, "block", r.URL.Query(), &params.Block)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "block", Err: err})
		return
	}

	// ------------- Optional query parameter "method" -------------

	err = runtime.BindQueryParameter("form", true, false, "method", r.URL.Query(), &params.Method)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "method", Err: err})
		return
	}

	// ------------- Optional query parameter "sender" -------------

	err = runtime.BindQueryParameter("form", true, false, "sender", r.URL.Query(), &params.Sender)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sender", Err: err})
		return
	}

	// ------------- Optional query parameter "minFee" -------------

	err = runtime.BindQueryParameter("form", true, false, "minFee", r.URL.Query(), &params.MinFee)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minFee", Err: err})
		return
	}

	// ------------- Optional query parameter "maxFee" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxFee", r.URL.Query(), &params.MaxFee)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxFee", Err: err})
		return
	}

	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusTransactions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusTransactionsTxHash operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusTransactionsTxHash(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tx_hash" -------------
	var txHash string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tx_hash", runtime.ParamLocationPath, chi.URLParam(r, "tx_hash"), &txHash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tx_hash", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusTransactionsTxHash(w, r, txHash)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusValidators operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusValidators(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsensusValidatorsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusValidators(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetConsensusValidatorsEntityId operation middleware
func (siw *ServerInterfaceWrapper) GetConsensusValidatorsEntityId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "entity_id" -------------
	var entityId signature.PublicKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, chi.URLParam(r, "entity_id"), &entityId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsensusValidatorsEntityId(w, r, entityId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEmeraldBlocks operation middleware
func (siw *ServerInterfaceWrapper) GetEmeraldBlocks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmeraldBlocksParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", r.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "after", Err: err})
		return
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", r.URL.Query(), &params.Before)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "before", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmeraldBlocks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEmeraldTokens operation middleware
func (siw *ServerInterfaceWrapper) GetEmeraldTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmeraldTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmeraldTokens(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEmeraldTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetEmeraldTransactions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmeraldTransactionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "block" -------------

	err = runtime.BindQueryParameter("form", true, false, "block", r.URL.Query(), &params.Block)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "block", Err: err})
		return
	}

	// ------------- Optional query parameter "rel" -------------

	err = runtime.BindQueryParameter("form", true, false, "rel", r.URL.Query(), &params.Rel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "rel", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmeraldTransactions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.Get)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts", wrapper.GetConsensusAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts/{address}", wrapper.GetConsensusAccountsAddress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts/{address}/debonding_delegations", wrapper.GetConsensusAccountsAddressDebondingDelegations)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/accounts/{address}/delegations", wrapper.GetConsensusAccountsAddressDelegations)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/blocks", wrapper.GetConsensusBlocks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/blocks/{height}", wrapper.GetConsensusBlocksHeight)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/entities", wrapper.GetConsensusEntities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/entities/{entity_id}", wrapper.GetConsensusEntitiesEntityId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/entities/{entity_id}/nodes", wrapper.GetConsensusEntitiesEntityIdNodes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/entities/{entity_id}/nodes/{node_id}", wrapper.GetConsensusEntitiesEntityIdNodesNodeId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/epochs", wrapper.GetConsensusEpochs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/epochs/{epoch}", wrapper.GetConsensusEpochsEpoch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/events", wrapper.GetConsensusEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/proposals", wrapper.GetConsensusProposals)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/proposals/{proposal_id}", wrapper.GetConsensusProposalsProposalId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/proposals/{proposal_id}/votes", wrapper.GetConsensusProposalsProposalIdVotes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/stats/tx_volume", wrapper.GetConsensusStatsTxVolume)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/transactions", wrapper.GetConsensusTransactions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/transactions/{tx_hash}", wrapper.GetConsensusTransactionsTxHash)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/validators", wrapper.GetConsensusValidators)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/consensus/validators/{entity_id}", wrapper.GetConsensusValidatorsEntityId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/emerald/blocks", wrapper.GetEmeraldBlocks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/emerald/tokens", wrapper.GetEmeraldTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/emerald/transactions", wrapper.GetEmeraldTransactions)
	})

	return r
}

type GetRequestObject struct {
}

type GetResponseObject interface {
	VisitGetResponse(w http.ResponseWriter) error
}

type Get200JSONResponse Status

func (response Get200JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Get400JSONResponse ApiError

func (response Get400JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Get404JSONResponse ApiError

func (response Get404JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Get500JSONResponse ApiError

func (response Get500JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsRequestObject struct {
	Params GetConsensusAccountsParams
}

type GetConsensusAccountsResponseObject interface {
	VisitGetConsensusAccountsResponse(w http.ResponseWriter) error
}

type GetConsensusAccounts200JSONResponse AccountList

func (response GetConsensusAccounts200JSONResponse) VisitGetConsensusAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccounts400JSONResponse ApiError

func (response GetConsensusAccounts400JSONResponse) VisitGetConsensusAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccounts404JSONResponse ApiError

func (response GetConsensusAccounts404JSONResponse) VisitGetConsensusAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccounts500JSONResponse ApiError

func (response GetConsensusAccounts500JSONResponse) VisitGetConsensusAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressRequestObject struct {
	Address staking.Address `json:"address"`
}

type GetConsensusAccountsAddressResponseObject interface {
	VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error
}

type GetConsensusAccountsAddress200JSONResponse Account

func (response GetConsensusAccountsAddress200JSONResponse) VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddress400JSONResponse ApiError

func (response GetConsensusAccountsAddress400JSONResponse) VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddress404JSONResponse ApiError

func (response GetConsensusAccountsAddress404JSONResponse) VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddress500JSONResponse ApiError

func (response GetConsensusAccountsAddress500JSONResponse) VisitGetConsensusAccountsAddressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegationsRequestObject struct {
	Address staking.Address `json:"address"`
}

type GetConsensusAccountsAddressDebondingDelegationsResponseObject interface {
	VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error
}

type GetConsensusAccountsAddressDebondingDelegations200JSONResponse DebondingDelegationList

func (response GetConsensusAccountsAddressDebondingDelegations200JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegations400JSONResponse ApiError

func (response GetConsensusAccountsAddressDebondingDelegations400JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegations404JSONResponse ApiError

func (response GetConsensusAccountsAddressDebondingDelegations404JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDebondingDelegations500JSONResponse ApiError

func (response GetConsensusAccountsAddressDebondingDelegations500JSONResponse) VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegationsRequestObject struct {
	Address staking.Address `json:"address"`
}

type GetConsensusAccountsAddressDelegationsResponseObject interface {
	VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error
}

type GetConsensusAccountsAddressDelegations200JSONResponse DelegationList

func (response GetConsensusAccountsAddressDelegations200JSONResponse) VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegations400JSONResponse ApiError

func (response GetConsensusAccountsAddressDelegations400JSONResponse) VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegations404JSONResponse ApiError

func (response GetConsensusAccountsAddressDelegations404JSONResponse) VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusAccountsAddressDelegations500JSONResponse ApiError

func (response GetConsensusAccountsAddressDelegations500JSONResponse) VisitGetConsensusAccountsAddressDelegationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksRequestObject struct {
	Params GetConsensusBlocksParams
}

type GetConsensusBlocksResponseObject interface {
	VisitGetConsensusBlocksResponse(w http.ResponseWriter) error
}

type GetConsensusBlocks200JSONResponse BlockList

func (response GetConsensusBlocks200JSONResponse) VisitGetConsensusBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocks400JSONResponse ApiError

func (response GetConsensusBlocks400JSONResponse) VisitGetConsensusBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocks404JSONResponse ApiError

func (response GetConsensusBlocks404JSONResponse) VisitGetConsensusBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocks500JSONResponse ApiError

func (response GetConsensusBlocks500JSONResponse) VisitGetConsensusBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksHeightRequestObject struct {
	Height int64 `json:"height"`
}

type GetConsensusBlocksHeightResponseObject interface {
	VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error
}

type GetConsensusBlocksHeight200JSONResponse Block

func (response GetConsensusBlocksHeight200JSONResponse) VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksHeight400JSONResponse ApiError

func (response GetConsensusBlocksHeight400JSONResponse) VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksHeight404JSONResponse ApiError

func (response GetConsensusBlocksHeight404JSONResponse) VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusBlocksHeight500JSONResponse ApiError

func (response GetConsensusBlocksHeight500JSONResponse) VisitGetConsensusBlocksHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesRequestObject struct {
	Params GetConsensusEntitiesParams
}

type GetConsensusEntitiesResponseObject interface {
	VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error
}

type GetConsensusEntities200JSONResponse EntityList

func (response GetConsensusEntities200JSONResponse) VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntities400JSONResponse ApiError

func (response GetConsensusEntities400JSONResponse) VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntities404JSONResponse ApiError

func (response GetConsensusEntities404JSONResponse) VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntities500JSONResponse ApiError

func (response GetConsensusEntities500JSONResponse) VisitGetConsensusEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityIdRequestObject struct {
	EntityId signature.PublicKey `json:"entity_id"`
}

type GetConsensusEntitiesEntityIdResponseObject interface {
	VisitGetConsensusEntitiesEntityIdResponse(w http.ResponseWriter) error
}

type GetConsensusEntitiesEntityId200JSONResponse Entity

func (response GetConsensusEntitiesEntityId200JSONResponse) VisitGetConsensusEntitiesEntityIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityId400JSONResponse ApiError

func (response GetConsensusEntitiesEntityId400JSONResponse) VisitGetConsensusEntitiesEntityIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityId404JSONResponse ApiError

func (response GetConsensusEntitiesEntityId404JSONResponse) VisitGetConsensusEntitiesEntityIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityId500JSONResponse ApiError

func (response GetConsensusEntitiesEntityId500JSONResponse) VisitGetConsensusEntitiesEntityIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityIdNodesRequestObject struct {
	EntityId signature.PublicKey `json:"entity_id"`
	Params   GetConsensusEntitiesEntityIdNodesParams
}

type GetConsensusEntitiesEntityIdNodesResponseObject interface {
	VisitGetConsensusEntitiesEntityIdNodesResponse(w http.ResponseWriter) error
}

type GetConsensusEntitiesEntityIdNodes200JSONResponse NodeList

func (response GetConsensusEntitiesEntityIdNodes200JSONResponse) VisitGetConsensusEntitiesEntityIdNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityIdNodes400JSONResponse ApiError

func (response GetConsensusEntitiesEntityIdNodes400JSONResponse) VisitGetConsensusEntitiesEntityIdNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityIdNodes404JSONResponse ApiError

func (response GetConsensusEntitiesEntityIdNodes404JSONResponse) VisitGetConsensusEntitiesEntityIdNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityIdNodes500JSONResponse ApiError

func (response GetConsensusEntitiesEntityIdNodes500JSONResponse) VisitGetConsensusEntitiesEntityIdNodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityIdNodesNodeIdRequestObject struct {
	EntityId signature.PublicKey `json:"entity_id"`
	NodeId   signature.PublicKey `json:"node_id"`
}

type GetConsensusEntitiesEntityIdNodesNodeIdResponseObject interface {
	VisitGetConsensusEntitiesEntityIdNodesNodeIdResponse(w http.ResponseWriter) error
}

type GetConsensusEntitiesEntityIdNodesNodeId200JSONResponse Node

func (response GetConsensusEntitiesEntityIdNodesNodeId200JSONResponse) VisitGetConsensusEntitiesEntityIdNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityIdNodesNodeId400JSONResponse ApiError

func (response GetConsensusEntitiesEntityIdNodesNodeId400JSONResponse) VisitGetConsensusEntitiesEntityIdNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityIdNodesNodeId404JSONResponse ApiError

func (response GetConsensusEntitiesEntityIdNodesNodeId404JSONResponse) VisitGetConsensusEntitiesEntityIdNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEntitiesEntityIdNodesNodeId500JSONResponse ApiError

func (response GetConsensusEntitiesEntityIdNodesNodeId500JSONResponse) VisitGetConsensusEntitiesEntityIdNodesNodeIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsRequestObject struct {
	Params GetConsensusEpochsParams
}

type GetConsensusEpochsResponseObject interface {
	VisitGetConsensusEpochsResponse(w http.ResponseWriter) error
}

type GetConsensusEpochs200JSONResponse EpochList

func (response GetConsensusEpochs200JSONResponse) VisitGetConsensusEpochsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochs400JSONResponse ApiError

func (response GetConsensusEpochs400JSONResponse) VisitGetConsensusEpochsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochs404JSONResponse ApiError

func (response GetConsensusEpochs404JSONResponse) VisitGetConsensusEpochsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochs500JSONResponse ApiError

func (response GetConsensusEpochs500JSONResponse) VisitGetConsensusEpochsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsEpochRequestObject struct {
	Epoch int64 `json:"epoch"`
}

type GetConsensusEpochsEpochResponseObject interface {
	VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error
}

type GetConsensusEpochsEpoch200JSONResponse Epoch

func (response GetConsensusEpochsEpoch200JSONResponse) VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsEpoch400JSONResponse ApiError

func (response GetConsensusEpochsEpoch400JSONResponse) VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsEpoch404JSONResponse ApiError

func (response GetConsensusEpochsEpoch404JSONResponse) VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEpochsEpoch500JSONResponse ApiError

func (response GetConsensusEpochsEpoch500JSONResponse) VisitGetConsensusEpochsEpochResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEventsRequestObject struct {
	Params GetConsensusEventsParams
}

type GetConsensusEventsResponseObject interface {
	VisitGetConsensusEventsResponse(w http.ResponseWriter) error
}

type GetConsensusEvents200JSONResponse ConsensusEventList

func (response GetConsensusEvents200JSONResponse) VisitGetConsensusEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEvents400JSONResponse ApiError

func (response GetConsensusEvents400JSONResponse) VisitGetConsensusEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEvents404JSONResponse ApiError

func (response GetConsensusEvents404JSONResponse) VisitGetConsensusEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusEvents500JSONResponse ApiError

func (response GetConsensusEvents500JSONResponse) VisitGetConsensusEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsRequestObject struct {
	Params GetConsensusProposalsParams
}

type GetConsensusProposalsResponseObject interface {
	VisitGetConsensusProposalsResponse(w http.ResponseWriter) error
}

type GetConsensusProposals200JSONResponse ProposalList

func (response GetConsensusProposals200JSONResponse) VisitGetConsensusProposalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposals400JSONResponse ApiError

func (response GetConsensusProposals400JSONResponse) VisitGetConsensusProposalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposals404JSONResponse ApiError

func (response GetConsensusProposals404JSONResponse) VisitGetConsensusProposalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposals500JSONResponse ApiError

func (response GetConsensusProposals500JSONResponse) VisitGetConsensusProposalsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdRequestObject struct {
	ProposalId int64 `json:"proposal_id"`
}

type GetConsensusProposalsProposalIdResponseObject interface {
	VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error
}

type GetConsensusProposalsProposalId200JSONResponse Proposal

func (response GetConsensusProposalsProposalId200JSONResponse) VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalId400JSONResponse ApiError

func (response GetConsensusProposalsProposalId400JSONResponse) VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalId404JSONResponse ApiError

func (response GetConsensusProposalsProposalId404JSONResponse) VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalId500JSONResponse ApiError

func (response GetConsensusProposalsProposalId500JSONResponse) VisitGetConsensusProposalsProposalIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdVotesRequestObject struct {
	ProposalId int64 `json:"proposal_id"`
	Params     GetConsensusProposalsProposalIdVotesParams
}

type GetConsensusProposalsProposalIdVotesResponseObject interface {
	VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error
}

type GetConsensusProposalsProposalIdVotes200JSONResponse ProposalVotes

func (response GetConsensusProposalsProposalIdVotes200JSONResponse) VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdVotes400JSONResponse ApiError

func (response GetConsensusProposalsProposalIdVotes400JSONResponse) VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdVotes404JSONResponse ApiError

func (response GetConsensusProposalsProposalIdVotes404JSONResponse) VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusProposalsProposalIdVotes500JSONResponse ApiError

func (response GetConsensusProposalsProposalIdVotes500JSONResponse) VisitGetConsensusProposalsProposalIdVotesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusStatsTxVolumeRequestObject struct {
	Params GetConsensusStatsTxVolumeParams
}

type GetConsensusStatsTxVolumeResponseObject interface {
	VisitGetConsensusStatsTxVolumeResponse(w http.ResponseWriter) error
}

type GetConsensusStatsTxVolume200JSONResponse TxVolumeList

func (response GetConsensusStatsTxVolume200JSONResponse) VisitGetConsensusStatsTxVolumeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusStatsTxVolume400JSONResponse ApiError

func (response GetConsensusStatsTxVolume400JSONResponse) VisitGetConsensusStatsTxVolumeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusStatsTxVolume404JSONResponse ApiError

func (response GetConsensusStatsTxVolume404JSONResponse) VisitGetConsensusStatsTxVolumeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusStatsTxVolume500JSONResponse ApiError

func (response GetConsensusStatsTxVolume500JSONResponse) VisitGetConsensusStatsTxVolumeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsRequestObject struct {
	Params GetConsensusTransactionsParams
}

type GetConsensusTransactionsResponseObject interface {
	VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error
}

type GetConsensusTransactions200JSONResponse TransactionList

func (response GetConsensusTransactions200JSONResponse) VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactions400JSONResponse ApiError

func (response GetConsensusTransactions400JSONResponse) VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactions404JSONResponse ApiError

func (response GetConsensusTransactions404JSONResponse) VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactions500JSONResponse ApiError

func (response GetConsensusTransactions500JSONResponse) VisitGetConsensusTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsTxHashRequestObject struct {
	TxHash string `json:"tx_hash"`
}

type GetConsensusTransactionsTxHashResponseObject interface {
	VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error
}

type GetConsensusTransactionsTxHash200JSONResponse Transaction

func (response GetConsensusTransactionsTxHash200JSONResponse) VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsTxHash400JSONResponse ApiError

func (response GetConsensusTransactionsTxHash400JSONResponse) VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsTxHash404JSONResponse ApiError

func (response GetConsensusTransactionsTxHash404JSONResponse) VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusTransactionsTxHash500JSONResponse ApiError

func (response GetConsensusTransactionsTxHash500JSONResponse) VisitGetConsensusTransactionsTxHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsRequestObject struct {
	Params GetConsensusValidatorsParams
}

type GetConsensusValidatorsResponseObject interface {
	VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error
}

type GetConsensusValidators200JSONResponse ValidatorList

func (response GetConsensusValidators200JSONResponse) VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidators400JSONResponse ApiError

func (response GetConsensusValidators400JSONResponse) VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidators404JSONResponse ApiError

func (response GetConsensusValidators404JSONResponse) VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidators500JSONResponse ApiError

func (response GetConsensusValidators500JSONResponse) VisitGetConsensusValidatorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsEntityIdRequestObject struct {
	EntityId signature.PublicKey `json:"entity_id"`
}

type GetConsensusValidatorsEntityIdResponseObject interface {
	VisitGetConsensusValidatorsEntityIdResponse(w http.ResponseWriter) error
}

type GetConsensusValidatorsEntityId200JSONResponse Validator

func (response GetConsensusValidatorsEntityId200JSONResponse) VisitGetConsensusValidatorsEntityIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsEntityId400JSONResponse ApiError

func (response GetConsensusValidatorsEntityId400JSONResponse) VisitGetConsensusValidatorsEntityIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsEntityId404JSONResponse ApiError

func (response GetConsensusValidatorsEntityId404JSONResponse) VisitGetConsensusValidatorsEntityIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConsensusValidatorsEntityId500JSONResponse ApiError

func (response GetConsensusValidatorsEntityId500JSONResponse) VisitGetConsensusValidatorsEntityIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldBlocksRequestObject struct {
	Params GetEmeraldBlocksParams
}

type GetEmeraldBlocksResponseObject interface {
	VisitGetEmeraldBlocksResponse(w http.ResponseWriter) error
}

type GetEmeraldBlocks200JSONResponse RuntimeBlockList

func (response GetEmeraldBlocks200JSONResponse) VisitGetEmeraldBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldBlocks400JSONResponse ApiError

func (response GetEmeraldBlocks400JSONResponse) VisitGetEmeraldBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldBlocks404JSONResponse ApiError

func (response GetEmeraldBlocks404JSONResponse) VisitGetEmeraldBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldBlocks500JSONResponse ApiError

func (response GetEmeraldBlocks500JSONResponse) VisitGetEmeraldBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldTokensRequestObject struct {
	Params GetEmeraldTokensParams
}

type GetEmeraldTokensResponseObject interface {
	VisitGetEmeraldTokensResponse(w http.ResponseWriter) error
}

type GetEmeraldTokens200JSONResponse RuntimeTokenList

func (response GetEmeraldTokens200JSONResponse) VisitGetEmeraldTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldTokens400JSONResponse ApiError

func (response GetEmeraldTokens400JSONResponse) VisitGetEmeraldTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldTokens404JSONResponse ApiError

func (response GetEmeraldTokens404JSONResponse) VisitGetEmeraldTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldTokens500JSONResponse ApiError

func (response GetEmeraldTokens500JSONResponse) VisitGetEmeraldTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldTransactionsRequestObject struct {
	Params GetEmeraldTransactionsParams
}

type GetEmeraldTransactionsResponseObject interface {
	VisitGetEmeraldTransactionsResponse(w http.ResponseWriter) error
}

type GetEmeraldTransactions200JSONResponse RuntimeTransactionList

func (response GetEmeraldTransactions200JSONResponse) VisitGetEmeraldTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldTransactions400JSONResponse ApiError

func (response GetEmeraldTransactions400JSONResponse) VisitGetEmeraldTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldTransactions404JSONResponse ApiError

func (response GetEmeraldTransactions404JSONResponse) VisitGetEmeraldTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEmeraldTransactions500JSONResponse ApiError

func (response GetEmeraldTransactions500JSONResponse) VisitGetEmeraldTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Returns the indexer status.
	// (GET /)
	Get(ctx context.Context, request GetRequestObject) (GetResponseObject, error)
	// Returns a list of consensus layer accounts.
	// (GET /consensus/accounts)
	GetConsensusAccounts(ctx context.Context, request GetConsensusAccountsRequestObject) (GetConsensusAccountsResponseObject, error)
	// Returns a consensus layer account.
	// (GET /consensus/accounts/{address})
	GetConsensusAccountsAddress(ctx context.Context, request GetConsensusAccountsAddressRequestObject) (GetConsensusAccountsAddressResponseObject, error)
	// Returns an account's debonding delegations.
	// (GET /consensus/accounts/{address}/debonding_delegations)
	GetConsensusAccountsAddressDebondingDelegations(ctx context.Context, request GetConsensusAccountsAddressDebondingDelegationsRequestObject) (GetConsensusAccountsAddressDebondingDelegationsResponseObject, error)
	// Returns an account's delegations.
	// (GET /consensus/accounts/{address}/delegations)
	GetConsensusAccountsAddressDelegations(ctx context.Context, request GetConsensusAccountsAddressDelegationsRequestObject) (GetConsensusAccountsAddressDelegationsResponseObject, error)
	// Returns a list of consensus blocks, sorted from most to least recent.
	// (GET /consensus/blocks)
	GetConsensusBlocks(ctx context.Context, request GetConsensusBlocksRequestObject) (GetConsensusBlocksResponseObject, error)
	// Returns a consensus block.
	// (GET /consensus/blocks/{height})
	GetConsensusBlocksHeight(ctx context.Context, request GetConsensusBlocksHeightRequestObject) (GetConsensusBlocksHeightResponseObject, error)
	// Returns a list of entities registered at the consensus layer.
	// (GET /consensus/entities)
	GetConsensusEntities(ctx context.Context, request GetConsensusEntitiesRequestObject) (GetConsensusEntitiesResponseObject, error)
	// Returns an entity registered at the consensus layer.
	// (GET /consensus/entities/{entity_id})
	GetConsensusEntitiesEntityId(ctx context.Context, request GetConsensusEntitiesEntityIdRequestObject) (GetConsensusEntitiesEntityIdResponseObject, error)
	// Returns a list of nodes registered at the consensus layer.
	// (GET /consensus/entities/{entity_id}/nodes)
	GetConsensusEntitiesEntityIdNodes(ctx context.Context, request GetConsensusEntitiesEntityIdNodesRequestObject) (GetConsensusEntitiesEntityIdNodesResponseObject, error)
	// Returns a node registered at the consensus layer.
	// (GET /consensus/entities/{entity_id}/nodes/{node_id})
	GetConsensusEntitiesEntityIdNodesNodeId(ctx context.Context, request GetConsensusEntitiesEntityIdNodesNodeIdRequestObject) (GetConsensusEntitiesEntityIdNodesNodeIdResponseObject, error)
	// Returns a list of consensus epochs.
	// (GET /consensus/epochs)
	GetConsensusEpochs(ctx context.Context, request GetConsensusEpochsRequestObject) (GetConsensusEpochsResponseObject, error)
	// Returns a consensus epoch.
	// (GET /consensus/epochs/{epoch})
	GetConsensusEpochsEpoch(ctx context.Context, request GetConsensusEpochsEpochRequestObject) (GetConsensusEpochsEpochResponseObject, error)
	// Returns a list of consensus events.
	// (GET /consensus/events)
	GetConsensusEvents(ctx context.Context, request GetConsensusEventsRequestObject) (GetConsensusEventsResponseObject, error)
	// Returns a list of governance proposals.
	// (GET /consensus/proposals)
	GetConsensusProposals(ctx context.Context, request GetConsensusProposalsRequestObject) (GetConsensusProposalsResponseObject, error)
	// Returns a governance proposal.
	// (GET /consensus/proposals/{proposal_id})
	GetConsensusProposalsProposalId(ctx context.Context, request GetConsensusProposalsProposalIdRequestObject) (GetConsensusProposalsProposalIdResponseObject, error)
	// Returns a list of votes for a governance proposal.
	// (GET /consensus/proposals/{proposal_id}/votes)
	GetConsensusProposalsProposalIdVotes(ctx context.Context, request GetConsensusProposalsProposalIdVotesRequestObject) (GetConsensusProposalsProposalIdVotesResponseObject, error)
	// Returns the consensus layer transaction volume at daily granularity
	// (GET /consensus/stats/tx_volume)
	GetConsensusStatsTxVolume(ctx context.Context, request GetConsensusStatsTxVolumeRequestObject) (GetConsensusStatsTxVolumeResponseObject, error)
	// Returns a list of consensus transactions.
	// (GET /consensus/transactions)
	GetConsensusTransactions(ctx context.Context, request GetConsensusTransactionsRequestObject) (GetConsensusTransactionsResponseObject, error)
	// Returns a consensus transaction.
	// (GET /consensus/transactions/{tx_hash})
	GetConsensusTransactionsTxHash(ctx context.Context, request GetConsensusTransactionsTxHashRequestObject) (GetConsensusTransactionsTxHashResponseObject, error)
	// Returns a list of validators registered at the consensus layer.
	// (GET /consensus/validators)
	GetConsensusValidators(ctx context.Context, request GetConsensusValidatorsRequestObject) (GetConsensusValidatorsResponseObject, error)
	// Returns a validator registered at the consensus layer.
	// (GET /consensus/validators/{entity_id})
	GetConsensusValidatorsEntityId(ctx context.Context, request GetConsensusValidatorsEntityIdRequestObject) (GetConsensusValidatorsEntityIdResponseObject, error)
	// Returns a list of Emerald blocks.
	// (GET /emerald/blocks)
	GetEmeraldBlocks(ctx context.Context, request GetEmeraldBlocksRequestObject) (GetEmeraldBlocksResponseObject, error)
	// Returns a list of ERC-20 tokens on Emerald.
	// (GET /emerald/tokens)
	GetEmeraldTokens(ctx context.Context, request GetEmeraldTokensRequestObject) (GetEmeraldTokensResponseObject, error)
	// Returns a list of Emerald transactions.
	// (GET /emerald/transactions)
	GetEmeraldTransactions(ctx context.Context, request GetEmeraldTransactionsRequestObject) (GetEmeraldTransactionsResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Get operation middleware
func (sh *strictHandler) Get(w http.ResponseWriter, r *http.Request) {
	var request GetRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Get(ctx, request.(GetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResponseObject); ok {
		if err := validResponse.VisitGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccounts operation middleware
func (sh *strictHandler) GetConsensusAccounts(w http.ResponseWriter, r *http.Request, params GetConsensusAccountsParams) {
	var request GetConsensusAccountsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccounts(ctx, request.(GetConsensusAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccounts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccountsAddress operation middleware
func (sh *strictHandler) GetConsensusAccountsAddress(w http.ResponseWriter, r *http.Request, address staking.Address) {
	var request GetConsensusAccountsAddressRequestObject

	request.Address = address

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccountsAddress(ctx, request.(GetConsensusAccountsAddressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccountsAddress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsAddressResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsAddressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccountsAddressDebondingDelegations operation middleware
func (sh *strictHandler) GetConsensusAccountsAddressDebondingDelegations(w http.ResponseWriter, r *http.Request, address staking.Address) {
	var request GetConsensusAccountsAddressDebondingDelegationsRequestObject

	request.Address = address

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccountsAddressDebondingDelegations(ctx, request.(GetConsensusAccountsAddressDebondingDelegationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccountsAddressDebondingDelegations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsAddressDebondingDelegationsResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsAddressDebondingDelegationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusAccountsAddressDelegations operation middleware
func (sh *strictHandler) GetConsensusAccountsAddressDelegations(w http.ResponseWriter, r *http.Request, address staking.Address) {
	var request GetConsensusAccountsAddressDelegationsRequestObject

	request.Address = address

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusAccountsAddressDelegations(ctx, request.(GetConsensusAccountsAddressDelegationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusAccountsAddressDelegations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusAccountsAddressDelegationsResponseObject); ok {
		if err := validResponse.VisitGetConsensusAccountsAddressDelegationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusBlocks operation middleware
func (sh *strictHandler) GetConsensusBlocks(w http.ResponseWriter, r *http.Request, params GetConsensusBlocksParams) {
	var request GetConsensusBlocksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusBlocks(ctx, request.(GetConsensusBlocksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusBlocks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusBlocksResponseObject); ok {
		if err := validResponse.VisitGetConsensusBlocksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusBlocksHeight operation middleware
func (sh *strictHandler) GetConsensusBlocksHeight(w http.ResponseWriter, r *http.Request, height int64) {
	var request GetConsensusBlocksHeightRequestObject

	request.Height = height

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusBlocksHeight(ctx, request.(GetConsensusBlocksHeightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusBlocksHeight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusBlocksHeightResponseObject); ok {
		if err := validResponse.VisitGetConsensusBlocksHeightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEntities operation middleware
func (sh *strictHandler) GetConsensusEntities(w http.ResponseWriter, r *http.Request, params GetConsensusEntitiesParams) {
	var request GetConsensusEntitiesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEntities(ctx, request.(GetConsensusEntitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEntities")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEntitiesResponseObject); ok {
		if err := validResponse.VisitGetConsensusEntitiesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEntitiesEntityId operation middleware
func (sh *strictHandler) GetConsensusEntitiesEntityId(w http.ResponseWriter, r *http.Request, entityId signature.PublicKey) {
	var request GetConsensusEntitiesEntityIdRequestObject

	request.EntityId = entityId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEntitiesEntityId(ctx, request.(GetConsensusEntitiesEntityIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEntitiesEntityId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEntitiesEntityIdResponseObject); ok {
		if err := validResponse.VisitGetConsensusEntitiesEntityIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEntitiesEntityIdNodes operation middleware
func (sh *strictHandler) GetConsensusEntitiesEntityIdNodes(w http.ResponseWriter, r *http.Request, entityId signature.PublicKey, params GetConsensusEntitiesEntityIdNodesParams) {
	var request GetConsensusEntitiesEntityIdNodesRequestObject

	request.EntityId = entityId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEntitiesEntityIdNodes(ctx, request.(GetConsensusEntitiesEntityIdNodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEntitiesEntityIdNodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEntitiesEntityIdNodesResponseObject); ok {
		if err := validResponse.VisitGetConsensusEntitiesEntityIdNodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEntitiesEntityIdNodesNodeId operation middleware
func (sh *strictHandler) GetConsensusEntitiesEntityIdNodesNodeId(w http.ResponseWriter, r *http.Request, entityId signature.PublicKey, nodeId signature.PublicKey) {
	var request GetConsensusEntitiesEntityIdNodesNodeIdRequestObject

	request.EntityId = entityId
	request.NodeId = nodeId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEntitiesEntityIdNodesNodeId(ctx, request.(GetConsensusEntitiesEntityIdNodesNodeIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEntitiesEntityIdNodesNodeId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEntitiesEntityIdNodesNodeIdResponseObject); ok {
		if err := validResponse.VisitGetConsensusEntitiesEntityIdNodesNodeIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEpochs operation middleware
func (sh *strictHandler) GetConsensusEpochs(w http.ResponseWriter, r *http.Request, params GetConsensusEpochsParams) {
	var request GetConsensusEpochsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEpochs(ctx, request.(GetConsensusEpochsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEpochs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEpochsResponseObject); ok {
		if err := validResponse.VisitGetConsensusEpochsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEpochsEpoch operation middleware
func (sh *strictHandler) GetConsensusEpochsEpoch(w http.ResponseWriter, r *http.Request, epoch int64) {
	var request GetConsensusEpochsEpochRequestObject

	request.Epoch = epoch

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEpochsEpoch(ctx, request.(GetConsensusEpochsEpochRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEpochsEpoch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEpochsEpochResponseObject); ok {
		if err := validResponse.VisitGetConsensusEpochsEpochResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusEvents operation middleware
func (sh *strictHandler) GetConsensusEvents(w http.ResponseWriter, r *http.Request, params GetConsensusEventsParams) {
	var request GetConsensusEventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusEvents(ctx, request.(GetConsensusEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusEventsResponseObject); ok {
		if err := validResponse.VisitGetConsensusEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusProposals operation middleware
func (sh *strictHandler) GetConsensusProposals(w http.ResponseWriter, r *http.Request, params GetConsensusProposalsParams) {
	var request GetConsensusProposalsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusProposals(ctx, request.(GetConsensusProposalsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusProposals")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusProposalsResponseObject); ok {
		if err := validResponse.VisitGetConsensusProposalsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusProposalsProposalId operation middleware
func (sh *strictHandler) GetConsensusProposalsProposalId(w http.ResponseWriter, r *http.Request, proposalId int64) {
	var request GetConsensusProposalsProposalIdRequestObject

	request.ProposalId = proposalId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusProposalsProposalId(ctx, request.(GetConsensusProposalsProposalIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusProposalsProposalId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusProposalsProposalIdResponseObject); ok {
		if err := validResponse.VisitGetConsensusProposalsProposalIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusProposalsProposalIdVotes operation middleware
func (sh *strictHandler) GetConsensusProposalsProposalIdVotes(w http.ResponseWriter, r *http.Request, proposalId int64, params GetConsensusProposalsProposalIdVotesParams) {
	var request GetConsensusProposalsProposalIdVotesRequestObject

	request.ProposalId = proposalId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusProposalsProposalIdVotes(ctx, request.(GetConsensusProposalsProposalIdVotesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusProposalsProposalIdVotes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusProposalsProposalIdVotesResponseObject); ok {
		if err := validResponse.VisitGetConsensusProposalsProposalIdVotesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusStatsTxVolume operation middleware
func (sh *strictHandler) GetConsensusStatsTxVolume(w http.ResponseWriter, r *http.Request, params GetConsensusStatsTxVolumeParams) {
	var request GetConsensusStatsTxVolumeRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusStatsTxVolume(ctx, request.(GetConsensusStatsTxVolumeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusStatsTxVolume")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusStatsTxVolumeResponseObject); ok {
		if err := validResponse.VisitGetConsensusStatsTxVolumeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusTransactions operation middleware
func (sh *strictHandler) GetConsensusTransactions(w http.ResponseWriter, r *http.Request, params GetConsensusTransactionsParams) {
	var request GetConsensusTransactionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusTransactions(ctx, request.(GetConsensusTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusTransactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusTransactionsResponseObject); ok {
		if err := validResponse.VisitGetConsensusTransactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusTransactionsTxHash operation middleware
func (sh *strictHandler) GetConsensusTransactionsTxHash(w http.ResponseWriter, r *http.Request, txHash string) {
	var request GetConsensusTransactionsTxHashRequestObject

	request.TxHash = txHash

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusTransactionsTxHash(ctx, request.(GetConsensusTransactionsTxHashRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusTransactionsTxHash")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusTransactionsTxHashResponseObject); ok {
		if err := validResponse.VisitGetConsensusTransactionsTxHashResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusValidators operation middleware
func (sh *strictHandler) GetConsensusValidators(w http.ResponseWriter, r *http.Request, params GetConsensusValidatorsParams) {
	var request GetConsensusValidatorsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusValidators(ctx, request.(GetConsensusValidatorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusValidators")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusValidatorsResponseObject); ok {
		if err := validResponse.VisitGetConsensusValidatorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetConsensusValidatorsEntityId operation middleware
func (sh *strictHandler) GetConsensusValidatorsEntityId(w http.ResponseWriter, r *http.Request, entityId signature.PublicKey) {
	var request GetConsensusValidatorsEntityIdRequestObject

	request.EntityId = entityId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConsensusValidatorsEntityId(ctx, request.(GetConsensusValidatorsEntityIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConsensusValidatorsEntityId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConsensusValidatorsEntityIdResponseObject); ok {
		if err := validResponse.VisitGetConsensusValidatorsEntityIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetEmeraldBlocks operation middleware
func (sh *strictHandler) GetEmeraldBlocks(w http.ResponseWriter, r *http.Request, params GetEmeraldBlocksParams) {
	var request GetEmeraldBlocksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEmeraldBlocks(ctx, request.(GetEmeraldBlocksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEmeraldBlocks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEmeraldBlocksResponseObject); ok {
		if err := validResponse.VisitGetEmeraldBlocksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetEmeraldTokens operation middleware
func (sh *strictHandler) GetEmeraldTokens(w http.ResponseWriter, r *http.Request, params GetEmeraldTokensParams) {
	var request GetEmeraldTokensRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEmeraldTokens(ctx, request.(GetEmeraldTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEmeraldTokens")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEmeraldTokensResponseObject); ok {
		if err := validResponse.VisitGetEmeraldTokensResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetEmeraldTransactions operation middleware
func (sh *strictHandler) GetEmeraldTransactions(w http.ResponseWriter, r *http.Request, params GetEmeraldTransactionsParams) {
	var request GetEmeraldTransactionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEmeraldTransactions(ctx, request.(GetEmeraldTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEmeraldTransactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEmeraldTransactionsResponseObject); ok {
		if err := validResponse.VisitGetEmeraldTransactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

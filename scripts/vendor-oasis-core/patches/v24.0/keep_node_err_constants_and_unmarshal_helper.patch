diff --git a/coreapi/v24.0/common/node/address.go b/coreapi/v24.0/common/node/address.go
index dff45b2..6d97844 100644
--- a/coreapi/v24.0/common/node/address.go
+++ b/coreapi/v24.0/common/node/address.go
@@ -1,6 +1,8 @@
 package node

 import (
+	"encoding"
+	"errors"
 	"fmt"
 	"net"
 	"strings"
@@ -8,7 +10,21 @@ import (
 	"github.com/oasisprotocol/oasis-core/go/common/crypto/signature"
 )

-// removed var block
+var (
+	// ErrInvalidAddress is the error returned when a transport address is
+	// invalid.
+	ErrInvalidAddress = errors.New("node: invalid transport address")
+	// ErrConsensusAddressNoID is the error returned when a consensus address
+	// doesn't have the ID@ part.
+	ErrConsensusAddressNoID = errors.New("node: consensus address doesn't have ID@ part")
+	// ErrTLSAddressNoPubKey is the error returned when a TLS address doesn't have the PubKey@ part.
+	ErrTLSAddressNoPubKey = errors.New("node: TLS address missing PubKey@ part")
+
+	_ encoding.TextMarshaler   = (*Address)(nil)
+	_ encoding.TextUnmarshaler = (*Address)(nil)
+	_ encoding.TextMarshaler   = (*ConsensusAddress)(nil)
+	_ encoding.TextUnmarshaler = (*ConsensusAddress)(nil)
+)

 // Address represents a TCP address for the purpose of node descriptors.
 type Address struct {
diff --git a/coreapi/v24.0/common/node/node.go b/coreapi/v24.0/common/node/node.go
index 38000b5..236f1a3 100644
--- a/coreapi/v24.0/common/node/node.go
+++ b/coreapi/v24.0/common/node/node.go
@@ -105,7 +105,24 @@ type nodeV2 struct { // nolint: maligned
 }

 // ToV3 returns the V3 representation of the V2 node descriptor.
-// removed func
+func (nv2 *nodeV2) ToV3() *Node {
+	nv3 := &Node{
+		Versioned:       cbor.NewVersioned(3),
+		ID:              nv2.ID,
+		EntityID:        nv2.EntityID,
+		Expiration:      nv2.Expiration,
+		P2P:             nv2.P2P,
+		Consensus:       nv2.Consensus,
+		Runtimes:        nv2.Runtimes,
+		SoftwareVersion: nv2.SoftwareVersion,
+		Roles:           nv2.Roles & ^roleReserved3,      // Clear consensus-rpc role.
+		TLS:             TLSInfo{PubKey: nv2.TLS.PubKey}, // Migrate to new TLS Info.
+	}
+	if nv2.VRF != nil {
+		nv3.VRF = *nv2.VRF
+	}
+	return nv3
+}

 // SoftwareVersion is the node's oasis-node software version.
 type SoftwareVersion string
@@ -181,7 +198,12 @@ func (m RolesMask) MarshalText() ([]byte, error) {
 	return []byte(m.String()), nil
 }

-// removed func
+func checkDuplicateRole(newRole RolesMask, curRoles RolesMask) error {
+	if curRoles&newRole != 0 {
+		return fmt.Errorf("node: duplicate role: '%s'", newRole)
+	}
+	return nil
+}

 // UnmarshalText decodes a text slice into a RolesMask.
 func (m *RolesMask) UnmarshalText(text []byte) error {
@@ -215,7 +237,7 @@ func (m *RolesMask) UnmarshalText(text []byte) error {
 			}
 			*m |= RoleStorageRPC
 		default:
-			return fmt.Errorf("%w: '%s'", ErrInvalidRole, role)
+			return fmt.Errorf("node: invalid role: '%s'", role)
 		}
 	}
 	return nil
